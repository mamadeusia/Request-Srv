// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: request_collaborator.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const getCountRequestCollaboratorsByAdminID = `-- name: GetCountRequestCollaboratorsByAdminID :one
SELECT COUNT(*) FROM request_collaborators
WHERE admin_id = $1
`

func (q *Queries) GetCountRequestCollaboratorsByAdminID(ctx context.Context, adminID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountRequestCollaboratorsByAdminID, adminID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getRequestCollaboratorsByAdminID = `-- name: GetRequestCollaboratorsByAdminID :many
SELECT request_id, requester_id, admin_id, validators FROM request_collaborators
WHERE admin_id = $1 
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetRequestCollaboratorsByAdminIDParams struct {
	AdminID int64 `db:"admin_id" json:"admin_id"`
	Limit   int32 `db:"limit" json:"limit"`
	Offset  int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetRequestCollaboratorsByAdminID(ctx context.Context, arg GetRequestCollaboratorsByAdminIDParams) ([]RequestCollaborators, error) {
	rows, err := q.db.Query(ctx, getRequestCollaboratorsByAdminID, arg.AdminID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RequestCollaborators{}
	for rows.Next() {
		var i RequestCollaborators
		if err := rows.Scan(
			&i.RequestID,
			&i.RequesterID,
			&i.AdminID,
			&i.Validators,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRequestColloboratorsAdmin = `-- name: UpdateRequestColloboratorsAdmin :exec
UPDATE request_collaborators SET admin_id = $2
WHERE request_id = $1
`

type UpdateRequestColloboratorsAdminParams struct {
	RequestID uuid.UUID `db:"request_id" json:"request_id"`
	AdminID   int64     `db:"admin_id" json:"admin_id"`
}

func (q *Queries) UpdateRequestColloboratorsAdmin(ctx context.Context, arg UpdateRequestColloboratorsAdminParams) error {
	_, err := q.db.Exec(ctx, updateRequestColloboratorsAdmin, arg.RequestID, arg.AdminID)
	return err
}

const updateRequestColloboratorsValidators = `-- name: UpdateRequestColloboratorsValidators :exec
UPDATE request_collaborators SET validators = $2
WHERE request_id = $1
`

type UpdateRequestColloboratorsValidatorsParams struct {
	RequestID  uuid.UUID `db:"request_id" json:"request_id"`
	Validators []int64   `db:"validators" json:"validators"`
}

func (q *Queries) UpdateRequestColloboratorsValidators(ctx context.Context, arg UpdateRequestColloboratorsValidatorsParams) error {
	_, err := q.db.Exec(ctx, updateRequestColloboratorsValidators, arg.RequestID, arg.Validators)
	return err
}
