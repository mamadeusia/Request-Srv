// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: request.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	entity "github.com/mamadeusia/RequestSrv/entity"
)

const createRequest = `-- name: CreateRequest :one
INSERT INTO requests (
  id,
  requester_id,
  full_name,
  age,
  location_lat,
  location_lon,
  status,
  photo,
  msgs
) VALUES (
    $1,$2,$3,$4,$5,$6,$7,$8,$9
) RETURNING id, full_name, age, location_lat, location_lon, status, requester_id, photo, msgs, question_answers, created_at
`

type CreateRequestParams struct {
	ID          uuid.UUID              `db:"id" json:"id"`
	RequesterID int64                  `db:"requester_id" json:"requester_id"`
	FullName    string                 `db:"full_name" json:"full_name"`
	Age         int32                  `db:"age" json:"age"`
	LocationLat float64                `db:"location_lat" json:"location_lat"`
	LocationLon float64                `db:"location_lon" json:"location_lon"`
	Status      RequestStatus          `db:"status" json:"status"`
	Photo       entity.StoredMessage   `db:"photo" json:"photo"`
	Msgs        []entity.StoredMessage `db:"msgs" json:"msgs"`
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (Requests, error) {
	row := q.db.QueryRow(ctx, createRequest,
		arg.ID,
		arg.RequesterID,
		arg.FullName,
		arg.Age,
		arg.LocationLat,
		arg.LocationLon,
		arg.Status,
		arg.Photo,
		arg.Msgs,
	)
	var i Requests
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Age,
		&i.LocationLat,
		&i.LocationLon,
		&i.Status,
		&i.RequesterID,
		&i.Photo,
		&i.Msgs,
		&i.QuestionAnswers,
		&i.CreatedAt,
	)
	return i, err
}

const getOrphanRequests = `-- name: GetOrphanRequests :many
SELECT id, full_name, age, location_lat, location_lon, status, requester_id, photo, msgs, question_answers, created_at FROM requests
WHERE status = 'admin_pending' 
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetOrphanRequestsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetOrphanRequests(ctx context.Context, arg GetOrphanRequestsParams) ([]Requests, error) {
	rows, err := q.db.Query(ctx, getOrphanRequests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Requests{}
	for rows.Next() {
		var i Requests
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Age,
			&i.LocationLat,
			&i.LocationLon,
			&i.Status,
			&i.RequesterID,
			&i.Photo,
			&i.Msgs,
			&i.QuestionAnswers,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRequestByID = `-- name: GetRequestByID :one
SELECT id, full_name, age, location_lat, location_lon, status, requester_id, photo, msgs, question_answers, created_at FROM requests
WHERE id = $1
`

func (q *Queries) GetRequestByID(ctx context.Context, id uuid.UUID) (Requests, error) {
	row := q.db.QueryRow(ctx, getRequestByID, id)
	var i Requests
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Age,
		&i.LocationLat,
		&i.LocationLon,
		&i.Status,
		&i.RequesterID,
		&i.Photo,
		&i.Msgs,
		&i.QuestionAnswers,
		&i.CreatedAt,
	)
	return i, err
}

const getRequestByRequesterID = `-- name: GetRequestByRequesterID :many
SELECT id, full_name, age, location_lat, location_lon, status, requester_id, photo, msgs, question_answers, created_at FROM requests
WHERE requester_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetRequestByRequesterIDParams struct {
	RequesterID int64 `db:"requester_id" json:"requester_id"`
	Limit       int32 `db:"limit" json:"limit"`
	Offset      int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetRequestByRequesterID(ctx context.Context, arg GetRequestByRequesterIDParams) ([]Requests, error) {
	rows, err := q.db.Query(ctx, getRequestByRequesterID, arg.RequesterID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Requests{}
	for rows.Next() {
		var i Requests
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Age,
			&i.LocationLat,
			&i.LocationLon,
			&i.Status,
			&i.RequesterID,
			&i.Photo,
			&i.Msgs,
			&i.QuestionAnswers,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRequestQuestionAnswers = `-- name: GetRequestQuestionAnswers :one
SELECT question_answers FROM requests
WHERE id = $1
`

func (q *Queries) GetRequestQuestionAnswers(ctx context.Context, id uuid.UUID) (entity.QuestionAnswerSlice, error) {
	row := q.db.QueryRow(ctx, getRequestQuestionAnswers, id)
	var question_answers entity.QuestionAnswerSlice
	err := row.Scan(&question_answers)
	return question_answers, err
}

const updateRequestQuestionAnswers = `-- name: UpdateRequestQuestionAnswers :exec
UPDATE requests SET question_answers = $2
WHERE id = $1
`

type UpdateRequestQuestionAnswersParams struct {
	ID              uuid.UUID                  `db:"id" json:"id"`
	QuestionAnswers entity.QuestionAnswerSlice `db:"question_answers" json:"question_answers"`
}

func (q *Queries) UpdateRequestQuestionAnswers(ctx context.Context, arg UpdateRequestQuestionAnswersParams) error {
	_, err := q.db.Exec(ctx, updateRequestQuestionAnswers, arg.ID, arg.QuestionAnswers)
	return err
}

const updateRequestStatus = `-- name: UpdateRequestStatus :exec
UPDATE requests SET status = $2
WHERE id = $1
`

type UpdateRequestStatusParams struct {
	ID     uuid.UUID     `db:"id" json:"id"`
	Status RequestStatus `db:"status" json:"status"`
}

func (q *Queries) UpdateRequestStatus(ctx context.Context, arg UpdateRequestStatusParams) error {
	_, err := q.db.Exec(ctx, updateRequestStatus, arg.ID, arg.Status)
	return err
}
