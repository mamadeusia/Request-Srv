// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/RequestSrv.proto

package RequestSrv

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RequestSrv service

func NewRequestSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RequestSrv service

type RequestSrvService interface {
	CreateRequest(ctx context.Context, in *CreateRequestRequest, opts ...client.CallOption) (*CreateRequestResponse, error)
	SetAdminForRequest(ctx context.Context, in *SetAdminForRequestRequest, opts ...client.CallOption) (*SetAdminForRequestResponse, error)
	SetValidatorsForRequest(ctx context.Context, in *SetValidatorsForRequestRequest, opts ...client.CallOption) (*SetValidatorsForRequestResponse, error)
	GetRequestByAdminID(ctx context.Context, in *GetRequestByAdminIDRequest, opts ...client.CallOption) (*GetRequestByAdminIDResponse, error)
	GetRequestByRequesterID(ctx context.Context, in *GetRequestByRequesterIDRequest, opts ...client.CallOption) (*GetRequestByRequesterIDResponse, error)
	UpdateRequest(ctx context.Context, in *UpdateRequestRequest, opts ...client.CallOption) (*UpdateRequestResponse, error)
	SendPotentialValidatorsNotifications(ctx context.Context, in *SendPotentialValidatorsNotificationsRequest, opts ...client.CallOption) (*SendPotentialValidatorsNotificationsResponse, error)
	// get data of request in admin-bot
	GetCountRequestByAdminID(ctx context.Context, in *GetCountRequestByAdminIDRequest, opts ...client.CallOption) (*GetCountRequestByAdminIDResponse, error)
	GetOrphanRequests(ctx context.Context, in *GetOrphanRequestsRequest, opts ...client.CallOption) (*GetOrphanRequestsResponse, error)
	AddQuestionAnswer(ctx context.Context, in *AddQuestionAnswerRequest, opts ...client.CallOption) (*AddQuestionAnswerResponse, error)
	GetQuestionAnswer(ctx context.Context, in *GetQuestionAnswerRequest, opts ...client.CallOption) (*GetQuestionAnswerResponse, error)
}

type requestSrvService struct {
	c    client.Client
	name string
}

func NewRequestSrvService(name string, c client.Client) RequestSrvService {
	return &requestSrvService{
		c:    c,
		name: name,
	}
}

func (c *requestSrvService) CreateRequest(ctx context.Context, in *CreateRequestRequest, opts ...client.CallOption) (*CreateRequestResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.CreateRequest", in)
	out := new(CreateRequestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) SetAdminForRequest(ctx context.Context, in *SetAdminForRequestRequest, opts ...client.CallOption) (*SetAdminForRequestResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.SetAdminForRequest", in)
	out := new(SetAdminForRequestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) SetValidatorsForRequest(ctx context.Context, in *SetValidatorsForRequestRequest, opts ...client.CallOption) (*SetValidatorsForRequestResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.SetValidatorsForRequest", in)
	out := new(SetValidatorsForRequestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) GetRequestByAdminID(ctx context.Context, in *GetRequestByAdminIDRequest, opts ...client.CallOption) (*GetRequestByAdminIDResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.GetRequestByAdminID", in)
	out := new(GetRequestByAdminIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) GetRequestByRequesterID(ctx context.Context, in *GetRequestByRequesterIDRequest, opts ...client.CallOption) (*GetRequestByRequesterIDResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.GetRequestByRequesterID", in)
	out := new(GetRequestByRequesterIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) UpdateRequest(ctx context.Context, in *UpdateRequestRequest, opts ...client.CallOption) (*UpdateRequestResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.UpdateRequest", in)
	out := new(UpdateRequestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) SendPotentialValidatorsNotifications(ctx context.Context, in *SendPotentialValidatorsNotificationsRequest, opts ...client.CallOption) (*SendPotentialValidatorsNotificationsResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.SendPotentialValidatorsNotifications", in)
	out := new(SendPotentialValidatorsNotificationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) GetCountRequestByAdminID(ctx context.Context, in *GetCountRequestByAdminIDRequest, opts ...client.CallOption) (*GetCountRequestByAdminIDResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.GetCountRequestByAdminID", in)
	out := new(GetCountRequestByAdminIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) GetOrphanRequests(ctx context.Context, in *GetOrphanRequestsRequest, opts ...client.CallOption) (*GetOrphanRequestsResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.GetOrphanRequests", in)
	out := new(GetOrphanRequestsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) AddQuestionAnswer(ctx context.Context, in *AddQuestionAnswerRequest, opts ...client.CallOption) (*AddQuestionAnswerResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.AddQuestionAnswer", in)
	out := new(AddQuestionAnswerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestSrvService) GetQuestionAnswer(ctx context.Context, in *GetQuestionAnswerRequest, opts ...client.CallOption) (*GetQuestionAnswerResponse, error) {
	req := c.c.NewRequest(c.name, "RequestSrv.GetQuestionAnswer", in)
	out := new(GetQuestionAnswerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RequestSrv service

type RequestSrvHandler interface {
	CreateRequest(context.Context, *CreateRequestRequest, *CreateRequestResponse) error
	SetAdminForRequest(context.Context, *SetAdminForRequestRequest, *SetAdminForRequestResponse) error
	SetValidatorsForRequest(context.Context, *SetValidatorsForRequestRequest, *SetValidatorsForRequestResponse) error
	GetRequestByAdminID(context.Context, *GetRequestByAdminIDRequest, *GetRequestByAdminIDResponse) error
	GetRequestByRequesterID(context.Context, *GetRequestByRequesterIDRequest, *GetRequestByRequesterIDResponse) error
	UpdateRequest(context.Context, *UpdateRequestRequest, *UpdateRequestResponse) error
	SendPotentialValidatorsNotifications(context.Context, *SendPotentialValidatorsNotificationsRequest, *SendPotentialValidatorsNotificationsResponse) error
	// get data of request in admin-bot
	GetCountRequestByAdminID(context.Context, *GetCountRequestByAdminIDRequest, *GetCountRequestByAdminIDResponse) error
	GetOrphanRequests(context.Context, *GetOrphanRequestsRequest, *GetOrphanRequestsResponse) error
	AddQuestionAnswer(context.Context, *AddQuestionAnswerRequest, *AddQuestionAnswerResponse) error
	GetQuestionAnswer(context.Context, *GetQuestionAnswerRequest, *GetQuestionAnswerResponse) error
}

func RegisterRequestSrvHandler(s server.Server, hdlr RequestSrvHandler, opts ...server.HandlerOption) error {
	type requestSrv interface {
		CreateRequest(ctx context.Context, in *CreateRequestRequest, out *CreateRequestResponse) error
		SetAdminForRequest(ctx context.Context, in *SetAdminForRequestRequest, out *SetAdminForRequestResponse) error
		SetValidatorsForRequest(ctx context.Context, in *SetValidatorsForRequestRequest, out *SetValidatorsForRequestResponse) error
		GetRequestByAdminID(ctx context.Context, in *GetRequestByAdminIDRequest, out *GetRequestByAdminIDResponse) error
		GetRequestByRequesterID(ctx context.Context, in *GetRequestByRequesterIDRequest, out *GetRequestByRequesterIDResponse) error
		UpdateRequest(ctx context.Context, in *UpdateRequestRequest, out *UpdateRequestResponse) error
		SendPotentialValidatorsNotifications(ctx context.Context, in *SendPotentialValidatorsNotificationsRequest, out *SendPotentialValidatorsNotificationsResponse) error
		GetCountRequestByAdminID(ctx context.Context, in *GetCountRequestByAdminIDRequest, out *GetCountRequestByAdminIDResponse) error
		GetOrphanRequests(ctx context.Context, in *GetOrphanRequestsRequest, out *GetOrphanRequestsResponse) error
		AddQuestionAnswer(ctx context.Context, in *AddQuestionAnswerRequest, out *AddQuestionAnswerResponse) error
		GetQuestionAnswer(ctx context.Context, in *GetQuestionAnswerRequest, out *GetQuestionAnswerResponse) error
	}
	type RequestSrv struct {
		requestSrv
	}
	h := &requestSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&RequestSrv{h}, opts...))
}

type requestSrvHandler struct {
	RequestSrvHandler
}

func (h *requestSrvHandler) CreateRequest(ctx context.Context, in *CreateRequestRequest, out *CreateRequestResponse) error {
	return h.RequestSrvHandler.CreateRequest(ctx, in, out)
}

func (h *requestSrvHandler) SetAdminForRequest(ctx context.Context, in *SetAdminForRequestRequest, out *SetAdminForRequestResponse) error {
	return h.RequestSrvHandler.SetAdminForRequest(ctx, in, out)
}

func (h *requestSrvHandler) SetValidatorsForRequest(ctx context.Context, in *SetValidatorsForRequestRequest, out *SetValidatorsForRequestResponse) error {
	return h.RequestSrvHandler.SetValidatorsForRequest(ctx, in, out)
}

func (h *requestSrvHandler) GetRequestByAdminID(ctx context.Context, in *GetRequestByAdminIDRequest, out *GetRequestByAdminIDResponse) error {
	return h.RequestSrvHandler.GetRequestByAdminID(ctx, in, out)
}

func (h *requestSrvHandler) GetRequestByRequesterID(ctx context.Context, in *GetRequestByRequesterIDRequest, out *GetRequestByRequesterIDResponse) error {
	return h.RequestSrvHandler.GetRequestByRequesterID(ctx, in, out)
}

func (h *requestSrvHandler) UpdateRequest(ctx context.Context, in *UpdateRequestRequest, out *UpdateRequestResponse) error {
	return h.RequestSrvHandler.UpdateRequest(ctx, in, out)
}

func (h *requestSrvHandler) SendPotentialValidatorsNotifications(ctx context.Context, in *SendPotentialValidatorsNotificationsRequest, out *SendPotentialValidatorsNotificationsResponse) error {
	return h.RequestSrvHandler.SendPotentialValidatorsNotifications(ctx, in, out)
}

func (h *requestSrvHandler) GetCountRequestByAdminID(ctx context.Context, in *GetCountRequestByAdminIDRequest, out *GetCountRequestByAdminIDResponse) error {
	return h.RequestSrvHandler.GetCountRequestByAdminID(ctx, in, out)
}

func (h *requestSrvHandler) GetOrphanRequests(ctx context.Context, in *GetOrphanRequestsRequest, out *GetOrphanRequestsResponse) error {
	return h.RequestSrvHandler.GetOrphanRequests(ctx, in, out)
}

func (h *requestSrvHandler) AddQuestionAnswer(ctx context.Context, in *AddQuestionAnswerRequest, out *AddQuestionAnswerResponse) error {
	return h.RequestSrvHandler.AddQuestionAnswer(ctx, in, out)
}

func (h *requestSrvHandler) GetQuestionAnswer(ctx context.Context, in *GetQuestionAnswerRequest, out *GetQuestionAnswerResponse) error {
	return h.RequestSrvHandler.GetQuestionAnswer(ctx, in, out)
}
